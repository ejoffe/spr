// Code generated by github.com/inigolabs/fezzik, DO NOT EDIT.

package genclient

import (
	"context"

	"github.com/inigolabs/fezzik/client"
)

type PullRequestsViewer struct {
	Login        string
	PullRequests PullRequestsViewerPullRequests
}

type PullRequestsViewerPullRequests struct {
	Nodes *PullRequestsViewerPullRequestsNodes
}

type PullRequestsViewerPullRequestsNodes []*struct {
	Id             string
	Number         int
	Title          string
	Body           string
	BaseRefName    string
	HeadRefName    string
	Mergeable      MergeableState
	ReviewDecision *PullRequestReviewDecision
	Repository     PullRequestsViewerPullRequestsNodesRepository
	Commits        PullRequestsViewerPullRequestsNodesCommits
}

type PullRequestsViewerPullRequestsNodesRepository struct {
	Id string
}

type PullRequestsViewerPullRequestsNodesCommits struct {
	Nodes *PullRequestsViewerPullRequestsNodesCommitsNodes
}

type PullRequestsViewerPullRequestsNodesCommitsNodes []*struct {
	Commit PullRequestsViewerPullRequestsNodesCommitsNodesCommit
}

type PullRequestsViewerPullRequestsNodesCommitsNodesCommit struct {
	Oid               string
	MessageHeadline   string
	MessageBody       string
	StatusCheckRollup *PullRequestsViewerPullRequestsNodesCommitsNodesCommitStatusCheckRollup
}

type PullRequestsViewerPullRequestsNodesCommitsNodesCommitStatusCheckRollup struct {
	State StatusState
}

type PullRequestsRepository struct {
	Id string
}

// PullRequestsResponse response type for PullRequests
type PullRequestsResponse struct {
	Viewer     PullRequestsViewer
	Repository *PullRequestsRepository
}

// PullRequests from github/githubclient/queries.graphql:1
func (c *gqlclient) PullRequests(ctx context.Context,
	repoOwner string,
	repoName string,
) (*PullRequestsResponse, error) {

	var pullRequestsOperation string = `
	query PullRequests($repo_owner : String!, $repo_name : String!) {
		viewer {
			login
			pullRequests(first: 100, states: [OPEN]) {
				nodes {
					id
					number
					title
					body
					baseRefName
					headRefName
					mergeable
					reviewDecision
					repository {
						id
					}
					commits(first: 100) {
						nodes {
							commit {
								oid
								messageHeadline
								messageBody
								statusCheckRollup {
									state
								}
							}
						}
					}
				}
			}
		}
		repository(owner: $repo_owner, name: $repo_name) {
			id
		}
	}`

	gqlreq := &client.GQLRequest{
		OperationName: "PullRequests",
		Query:         pullRequestsOperation,
		Variables: map[string]interface{}{
			"repo_owner": repoOwner,
			"repo_name":  repoName,
		},
	}

	resp := &client.GQLResponse{
		Data: &PullRequestsResponse{},
	}

	err := c.gql.Query(ctx, gqlreq, resp)
	if err != nil {
		return nil, err
	}

	var data *PullRequestsResponse
	if resp.Data != nil {
		data = resp.Data.(*PullRequestsResponse)
	}

	if resp.Errors == nil {
		return data, nil
	}

	return data, resp.Errors
}

type AssignableUsersRepository struct {
	AssignableUsers AssignableUsersRepositoryAssignableUsers
}

type AssignableUsersRepositoryAssignableUsers struct {
	Nodes    *AssignableUsersRepositoryAssignableUsersNodes
	PageInfo AssignableUsersRepositoryAssignableUsersPageInfo
}

type AssignableUsersRepositoryAssignableUsersNodes []*struct {
	Id    string
	Login string
	Name  *string
}

type AssignableUsersRepositoryAssignableUsersPageInfo struct {
	HasNextPage bool
	EndCursor   *string
}

// AssignableUsersResponse response type for AssignableUsers
type AssignableUsersResponse struct {
	Repository *AssignableUsersRepository
}

// AssignableUsers from github/githubclient/queries.graphql:40
func (c *gqlclient) AssignableUsers(ctx context.Context,
	repoOwner string,
	repoName string,
	endCursor *string,
) (*AssignableUsersResponse, error) {

	var assignableUsersOperation string = `
	query AssignableUsers($repo_owner : String!, $repo_name : String!, $end_cursor : String) {
		repository(owner: $repo_owner, name: $repo_name) {
			assignableUsers(first: 100, after: $end_cursor) {
				nodes {
					id
					login
					name
				}
				pageInfo {
					hasNextPage
					endCursor
				}
			}
		}
	}`

	gqlreq := &client.GQLRequest{
		OperationName: "AssignableUsers",
		Query:         assignableUsersOperation,
		Variables: map[string]interface{}{
			"repo_owner": repoOwner,
			"repo_name":  repoName,
			"end_cursor": endCursor,
		},
	}

	resp := &client.GQLResponse{
		Data: &AssignableUsersResponse{},
	}

	err := c.gql.Query(ctx, gqlreq, resp)
	if err != nil {
		return nil, err
	}

	var data *AssignableUsersResponse
	if resp.Data != nil {
		data = resp.Data.(*AssignableUsersResponse)
	}

	if resp.Errors == nil {
		return data, nil
	}

	return data, resp.Errors
}

type CreatePullRequestCreatePullRequest struct {
	PullRequest *CreatePullRequestCreatePullRequestPullRequest
}

type CreatePullRequestCreatePullRequestPullRequest struct {
	Id     string
	Number int
}

// CreatePullRequestResponse response type for CreatePullRequest
type CreatePullRequestResponse struct {
	CreatePullRequest *CreatePullRequestCreatePullRequest
}

// CreatePullRequest from github/githubclient/queries.graphql:60
func (c *gqlclient) CreatePullRequest(ctx context.Context,
	input CreatePullRequestInput,
) (*CreatePullRequestResponse, error) {

	var createPullRequestOperation string = `
	mutation CreatePullRequest($input : CreatePullRequestInput!) {
		createPullRequest(input: $input) {
			pullRequest {
				id
				number
			}
		}
	}`

	gqlreq := &client.GQLRequest{
		OperationName: "CreatePullRequest",
		Query:         createPullRequestOperation,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	resp := &client.GQLResponse{
		Data: &CreatePullRequestResponse{},
	}

	err := c.gql.Query(ctx, gqlreq, resp)
	if err != nil {
		return nil, err
	}

	var data *CreatePullRequestResponse
	if resp.Data != nil {
		data = resp.Data.(*CreatePullRequestResponse)
	}

	if resp.Errors == nil {
		return data, nil
	}

	return data, resp.Errors
}

type UpdatePullRequestUpdatePullRequest struct {
	PullRequest *UpdatePullRequestUpdatePullRequestPullRequest
}

type UpdatePullRequestUpdatePullRequestPullRequest struct {
	Number int
}

// UpdatePullRequestResponse response type for UpdatePullRequest
type UpdatePullRequestResponse struct {
	UpdatePullRequest *UpdatePullRequestUpdatePullRequest
}

// UpdatePullRequest from github/githubclient/queries.graphql:73
func (c *gqlclient) UpdatePullRequest(ctx context.Context,
	input UpdatePullRequestInput,
) (*UpdatePullRequestResponse, error) {

	var updatePullRequestOperation string = `
	mutation UpdatePullRequest($input : UpdatePullRequestInput!) {
		updatePullRequest(input: $input) {
			pullRequest {
				number
			}
		}
	}`

	gqlreq := &client.GQLRequest{
		OperationName: "UpdatePullRequest",
		Query:         updatePullRequestOperation,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	resp := &client.GQLResponse{
		Data: &UpdatePullRequestResponse{},
	}

	err := c.gql.Query(ctx, gqlreq, resp)
	if err != nil {
		return nil, err
	}

	var data *UpdatePullRequestResponse
	if resp.Data != nil {
		data = resp.Data.(*UpdatePullRequestResponse)
	}

	if resp.Errors == nil {
		return data, nil
	}

	return data, resp.Errors
}

type AddReviewersRequestReviews struct {
	PullRequest *AddReviewersRequestReviewsPullRequest
}

type AddReviewersRequestReviewsPullRequest struct {
	Id string
}

// AddReviewersResponse response type for AddReviewers
type AddReviewersResponse struct {
	RequestReviews *AddReviewersRequestReviews
}

// AddReviewers from github/githubclient/queries.graphql:85
func (c *gqlclient) AddReviewers(ctx context.Context,
	input RequestReviewsInput,
) (*AddReviewersResponse, error) {

	var addReviewersOperation string = `
	mutation AddReviewers($input : RequestReviewsInput!) {
		requestReviews(input: $input) {
			pullRequest {
				id
			}
		}
	}`

	gqlreq := &client.GQLRequest{
		OperationName: "AddReviewers",
		Query:         addReviewersOperation,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	resp := &client.GQLResponse{
		Data: &AddReviewersResponse{},
	}

	err := c.gql.Query(ctx, gqlreq, resp)
	if err != nil {
		return nil, err
	}

	var data *AddReviewersResponse
	if resp.Data != nil {
		data = resp.Data.(*AddReviewersResponse)
	}

	if resp.Errors == nil {
		return data, nil
	}

	return data, resp.Errors
}

type CommentPullRequestAddComment struct {
	ClientMutationId *string
}

// CommentPullRequestResponse response type for CommentPullRequest
type CommentPullRequestResponse struct {
	AddComment *CommentPullRequestAddComment
}

// CommentPullRequest from github/githubclient/queries.graphql:97
func (c *gqlclient) CommentPullRequest(ctx context.Context,
	input AddCommentInput,
) (*CommentPullRequestResponse, error) {

	var commentPullRequestOperation string = `
	mutation CommentPullRequest($input : AddCommentInput!) {
		addComment(input: $input) {
			clientMutationId
		}
	}`

	gqlreq := &client.GQLRequest{
		OperationName: "CommentPullRequest",
		Query:         commentPullRequestOperation,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	resp := &client.GQLResponse{
		Data: &CommentPullRequestResponse{},
	}

	err := c.gql.Query(ctx, gqlreq, resp)
	if err != nil {
		return nil, err
	}

	var data *CommentPullRequestResponse
	if resp.Data != nil {
		data = resp.Data.(*CommentPullRequestResponse)
	}

	if resp.Errors == nil {
		return data, nil
	}

	return data, resp.Errors
}

type MergePullRequestMergePullRequest struct {
	PullRequest *MergePullRequestMergePullRequestPullRequest
}

type MergePullRequestMergePullRequestPullRequest struct {
	Number int
}

// MergePullRequestResponse response type for MergePullRequest
type MergePullRequestResponse struct {
	MergePullRequest *MergePullRequestMergePullRequest
}

// MergePullRequest from github/githubclient/queries.graphql:107
func (c *gqlclient) MergePullRequest(ctx context.Context,
	input MergePullRequestInput,
) (*MergePullRequestResponse, error) {

	var mergePullRequestOperation string = `
	mutation MergePullRequest($input : MergePullRequestInput!) {
		mergePullRequest(input: $input) {
			pullRequest {
				number
			}
		}
	}`

	gqlreq := &client.GQLRequest{
		OperationName: "MergePullRequest",
		Query:         mergePullRequestOperation,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	resp := &client.GQLResponse{
		Data: &MergePullRequestResponse{},
	}

	err := c.gql.Query(ctx, gqlreq, resp)
	if err != nil {
		return nil, err
	}

	var data *MergePullRequestResponse
	if resp.Data != nil {
		data = resp.Data.(*MergePullRequestResponse)
	}

	if resp.Errors == nil {
		return data, nil
	}

	return data, resp.Errors
}

type AutoMergePullRequestEnablePullRequestAutoMerge struct {
	PullRequest *AutoMergePullRequestEnablePullRequestAutoMergePullRequest
}

type AutoMergePullRequestEnablePullRequestAutoMergePullRequest struct {
	Number int
}

// AutoMergePullRequestResponse response type for AutoMergePullRequest
type AutoMergePullRequestResponse struct {
	EnablePullRequestAutoMerge *AutoMergePullRequestEnablePullRequestAutoMerge
}

// AutoMergePullRequest from github/githubclient/queries.graphql:119
func (c *gqlclient) AutoMergePullRequest(ctx context.Context,
	input EnablePullRequestAutoMergeInput,
) (*AutoMergePullRequestResponse, error) {

	var autoMergePullRequestOperation string = `
	mutation AutoMergePullRequest($input : EnablePullRequestAutoMergeInput!) {
		enablePullRequestAutoMerge(input: $input) {
			pullRequest {
				number
			}
		}
	}`

	gqlreq := &client.GQLRequest{
		OperationName: "AutoMergePullRequest",
		Query:         autoMergePullRequestOperation,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	resp := &client.GQLResponse{
		Data: &AutoMergePullRequestResponse{},
	}

	err := c.gql.Query(ctx, gqlreq, resp)
	if err != nil {
		return nil, err
	}

	var data *AutoMergePullRequestResponse
	if resp.Data != nil {
		data = resp.Data.(*AutoMergePullRequestResponse)
	}

	if resp.Errors == nil {
		return data, nil
	}

	return data, resp.Errors
}

type ClosePullRequestClosePullRequest struct {
	PullRequest *ClosePullRequestClosePullRequestPullRequest
}

type ClosePullRequestClosePullRequestPullRequest struct {
	Number int
}

// ClosePullRequestResponse response type for ClosePullRequest
type ClosePullRequestResponse struct {
	ClosePullRequest *ClosePullRequestClosePullRequest
}

// ClosePullRequest from github/githubclient/queries.graphql:131
func (c *gqlclient) ClosePullRequest(ctx context.Context,
	input ClosePullRequestInput,
) (*ClosePullRequestResponse, error) {

	var closePullRequestOperation string = `
	mutation ClosePullRequest($input : ClosePullRequestInput!) {
		closePullRequest(input: $input) {
			pullRequest {
				number
			}
		}
	}`

	gqlreq := &client.GQLRequest{
		OperationName: "ClosePullRequest",
		Query:         closePullRequestOperation,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	resp := &client.GQLResponse{
		Data: &ClosePullRequestResponse{},
	}

	err := c.gql.Query(ctx, gqlreq, resp)
	if err != nil {
		return nil, err
	}

	var data *ClosePullRequestResponse
	if resp.Data != nil {
		data = resp.Data.(*ClosePullRequestResponse)
	}

	if resp.Errors == nil {
		return data, nil
	}

	return data, resp.Errors
}

type StarCheckViewer struct {
	StarredRepositories StarCheckViewerStarredRepositories
}

type StarCheckViewerStarredRepositories struct {
	Nodes      *StarCheckViewerStarredRepositoriesNodes
	Edges      *StarCheckViewerStarredRepositoriesEdges
	TotalCount int
}

type StarCheckViewerStarredRepositoriesNodes []*struct {
	NameWithOwner string
}

type StarCheckViewerStarredRepositoriesEdges []*struct {
	Cursor string
}

// StarCheckResponse response type for StarCheck
type StarCheckResponse struct {
	Viewer StarCheckViewer
}

// StarCheck from github/githubclient/queries.graphql:143
func (c *gqlclient) StarCheck(ctx context.Context,
	after *string,
) (*StarCheckResponse, error) {

	var starCheckOperation string = `
	query StarCheck($after : String) {
		viewer {
			starredRepositories(first: 100, after: $after) {
				nodes {
					nameWithOwner
				}
				edges {
					cursor
				}
				totalCount
			}
		}
	}`

	gqlreq := &client.GQLRequest{
		OperationName: "StarCheck",
		Query:         starCheckOperation,
		Variables: map[string]interface{}{
			"after": after,
		},
	}

	resp := &client.GQLResponse{
		Data: &StarCheckResponse{},
	}

	err := c.gql.Query(ctx, gqlreq, resp)
	if err != nil {
		return nil, err
	}

	var data *StarCheckResponse
	if resp.Data != nil {
		data = resp.Data.(*StarCheckResponse)
	}

	if resp.Errors == nil {
		return data, nil
	}

	return data, resp.Errors
}

type StarGetRepoRepository struct {
	Id string
}

// StarGetRepoResponse response type for StarGetRepo
type StarGetRepoResponse struct {
	Repository *StarGetRepoRepository
}

// StarGetRepo from github/githubclient/queries.graphql:159
func (c *gqlclient) StarGetRepo(ctx context.Context,
	owner string,
	name string,
) (*StarGetRepoResponse, error) {

	var starGetRepoOperation string = `
	query StarGetRepo($owner : String!, $name : String!) {
		repository(owner: $owner, name: $name) {
			id
		}
	}`

	gqlreq := &client.GQLRequest{
		OperationName: "StarGetRepo",
		Query:         starGetRepoOperation,
		Variables: map[string]interface{}{
			"owner": owner,
			"name":  name,
		},
	}

	resp := &client.GQLResponse{
		Data: &StarGetRepoResponse{},
	}

	err := c.gql.Query(ctx, gqlreq, resp)
	if err != nil {
		return nil, err
	}

	var data *StarGetRepoResponse
	if resp.Data != nil {
		data = resp.Data.(*StarGetRepoResponse)
	}

	if resp.Errors == nil {
		return data, nil
	}

	return data, resp.Errors
}

type StarAddAddStar struct {
	ClientMutationId *string
}

// StarAddResponse response type for StarAdd
type StarAddResponse struct {
	AddStar *StarAddAddStar
}

// StarAdd from github/githubclient/queries.graphql:168
func (c *gqlclient) StarAdd(ctx context.Context,
	input AddStarInput,
) (*StarAddResponse, error) {

	var starAddOperation string = `
	mutation StarAdd($input : AddStarInput!) {
		addStar(input: $input) {
			clientMutationId
		}
	}`

	gqlreq := &client.GQLRequest{
		OperationName: "StarAdd",
		Query:         starAddOperation,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	resp := &client.GQLResponse{
		Data: &StarAddResponse{},
	}

	err := c.gql.Query(ctx, gqlreq, resp)
	if err != nil {
		return nil, err
	}

	var data *StarAddResponse
	if resp.Data != nil {
		data = resp.Data.(*StarAddResponse)
	}

	if resp.Errors == nil {
		return data, nil
	}

	return data, resp.Errors
}
